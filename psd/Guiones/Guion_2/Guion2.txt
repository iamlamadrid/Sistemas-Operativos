1. Despues de ejecutar el ldd a.out, vemos que aparece la libreria libc.so
2. Con strerror sale por la linea 0 y con perror por la 2, que es la de errores
3. Se ven el text el data y el bss. Al comentar se modifica el .text (archivos drop)
   Heap y stack no se almacenan en ELF, sino que se generan en tiempo de ejecucion.
4. systemd/ligthdm/ligthdm/upstar/gnome-terminal/bash/pstree
   la diferencia es que el de maquina virtual es mucho mas pequeño que el otro
5. grep -r vruntime Muestra el tiempo que se ha estado ejecutando la CPU
6. El mensaje de error saldría por el canal 2 ya que se usa perror
7. ej7-1.c y ej7-2.c
8. ej8.c
10. wait.c
11. minishell.c
12. Al crear el proceso se copia la memoria, pero no se comparte
13. El padre escribe mas tarde porque es el ultimo en ejecutarse, ya que tiene un sleep.
    Si el fichero se ha abierto antes del fork se comparte, pero si se abre despues se sobreescribe
14. Sale el PID del padre y del hijo, despues el PPID de cada uno, el del padre es 1707
    y el del hijo es siempre 1. Luego el grupo de cada uno, que es el mismo para ambos, que varia con
    cada ejecucion
15. Captura de pantalla de la ejecucion. No, no deja usar un valor negativo.
16. Top sirve para ver todos los procesos activos en el ordenador
    w muestra informacion sobre los usuarios que estan conectados en ese momento a la maquina y sobre sus procesos
    free muestra la memoria libre y utilizada. Por un lado muestra la memoria fisica y por otro la swap
    uptime muestra informacion sobre el tiempo que lleva sin ser reiniciado el ordenador.

    //
17. Con el comando lscpu
18. 64 señales, con el kill -l veo todas
    Hemos usado la señal de kill

19. El original puedes pulsarlo 4 veces antes de que acabe.
    ej19.c
20. He comentado la linea en el caso del hijo, la de signal(SIGUSR1, hijo);
    No se ejecutan alternandose el padre y el hijo, sino que se ejecutan al azar
21. En la variable antiguo se guarda la señal del padre, y de 5 a 10 se envia siempre esa señal, en vez de la del padre y el hijo
    Captura ej21 codigo pingpong2.c
22.
23. Ej23.png no hay diferencia entre uno o varios ctrl-c
24. Ej24.png
25.
26. Cambiamos el define a 120 y no varía nada, sin embargo, si pones un numero menor al tamaño de los strings, solo se muestra
    ese numero de palabras.
27. En el programa ya dado tenemos 3 procesos, abuelo padre y nieto, el padre escribe en pantalla el msg1 y el nieto el msg2 y
    el msg3
    dos1.c con el codigo modificado. El programa termina pero no muestra el prompt
28. codigo en dropbox, doble.c(sacar captura de codigo) ej28.png
29. Se paro en 65536
    No se deberia escribir mas de 4096
